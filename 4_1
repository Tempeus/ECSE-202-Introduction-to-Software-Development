import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;

import acm.graphics.GLabel;
import acm.graphics.GLine;
import acm.graphics.GObject;
import acm.graphics.GOval;
import acm.program.GraphicsProgram;
import acm.util.RandomGenerator;

@SuppressWarnings("serial")
public class bSim extends GraphicsProgram {
	//required parameters for the program
	private static final int WIDTH = 1200;
	public static final int HEIGHT = 600;
	public static final int OFFSET = 200;
	public static final int NUMBALLS = 15;
	private static final double MINSIZE = 1;
	private static final double MAXSIZE = 8;
	private static final double XMIN = 10;
	private static final double XMAX = 50;
	private static final double YMIN = 50;
	private static final double YMAX = 100;
	private static final double EMIN = 0.4;
	private static final double EMAX = 0.9;
	private static final double VMIN = 0.5;
	private static final double VMAX = 3.0;
	private GObject gobj; /* The object being dragged */
	private double lastX;
	private double lastY;
	private GOval clickedOval;
	private bNode clickedNode;
	private bTree myTree;
	
	
	RandomGenerator rgen = new RandomGenerator();
	
	public void init() {
		addMouseListeners();
	}
	
	public void run() {
		
		addMouseListeners();
		//set up display, create and start multiple instances of gball
		this.resize(WIDTH, HEIGHT + OFFSET);
		GLine ground = new GLine(0,HEIGHT,WIDTH,HEIGHT);
		add(ground);
		
		
		
		for(int i = 0; i < NUMBALLS; i++) {
			double iX = rgen.nextDouble(XMIN,XMAX);
			double iY = rgen.nextDouble(YMIN,YMAX);
			double iSize = rgen.nextDouble(MINSIZE,MAXSIZE);
			Color iColor = rgen.nextColor();
			double iE = rgen.nextDouble(EMIN,EMAX);
			double iV = rgen.nextDouble(VMIN,VMAX);
			
			gBall iball = new gBall(iX *5,iY * 5,iSize * 5 ,iColor ,iE ,iV);
			add(iball.myBall);
			myTree.addNode(iball);
			iball.start();
		}
		while(myTree.isRunning());
		
		GLabel Notification = new GLabel ("Left click to sort the balls",400, 500);
		Notification.setFont(new Font("Serif",Font.BOLD, 46));
		add(Notification);
		waitForClick();
		myTree.moveSort();
	}
	
	public void mousePressed(MouseEvent e) {
		lastX = e.getX();
		lastY = e.getY();
		gobj = getElementAt(lastX, lastY);
		if (!(gobj == null)) {
			clickedOval = (GOval) gobj;
			clickedNode = myTree.findNode(clickedOval);
			clickedNode.data.myBall.setColor(Color.RED);
			clickedNode.data.setBState(false);
		}
		else {
			println("null");
		}
	}
}
